#!/bin/bash

# CVE Lookup and Analysis Helper
# This script helps analyze CVEs found during vulnerability scanning

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_cve() {
    echo -e "${PURPLE}[CVE]${NC} $1"
}

# Function to lookup CVE details
lookup_cve() {
    local cve="$1"
    
    print_info "Looking up CVE: $cve"
    
    # Validate CVE format
    if [[ ! "$cve" =~ ^CVE-[0-9]{4}-[0-9]+$ ]]; then
        print_error "Invalid CVE format: $cve"
        return 1
    fi
    
    # Try to get CVE details from NVD API
    local nvd_url="https://services.nvd.nist.gov/rest/json/cve/1.0/$cve"
    
    if command -v curl &> /dev/null; then
        print_info "Fetching details from NVD..."
        
        local response
        response=$(curl -s "$nvd_url" 2>/dev/null) || {
            print_warning "Failed to fetch from NVD API"
            return 1
        }
        
        if command -v jq &> /dev/null; then
            # Parse JSON response if jq is available
            local description
            description=$(echo "$response" | jq -r '.result.CVE_Items[0].cve.description.description_data[0].value' 2>/dev/null)
            
            if [ "$description" != "null" ] && [ -n "$description" ]; then
                print_cve "$cve Description:"
                echo "$description"
            else
                print_warning "No description found for $cve"
            fi
            
            # Get CVSS score
            local cvss_score
            cvss_score=$(echo "$response" | jq -r '.result.CVE_Items[0].impact.baseMetricV3.cvssV3.baseScore' 2>/dev/null)
            
            if [ "$cvss_score" != "null" ] && [ -n "$cvss_score" ]; then
                print_info "CVSS Score: $cvss_score"
            fi
        else
            print_warning "jq not found, cannot parse JSON response"
        fi
    else
        print_warning "curl not found, cannot fetch CVE details"
    fi
    
    # Provide manual lookup URLs
    echo ""
    print_info "Manual lookup URLs:"
    echo "  NVD: https://nvd.nist.gov/vuln/detail/$cve"
    echo "  MITRE: https://cve.mitre.org/cgi-bin/cvename.cgi?name=$cve"
    echo "  CVE Details: https://www.cvedetails.com/cve/$cve"
}

# Function to analyze multiple CVEs
analyze_cves() {
    local cve_file="$1"
    
    if [ ! -f "$cve_file" ]; then
        print_error "CVE file not found: $cve_file"
        return 1
    fi
    
    print_info "Analyzing CVEs from: $cve_file"
    
    local count=0
    while IFS= read -r cve; do
        if [ -n "$cve" ]; then
            echo ""
            echo "========================================"
            lookup_cve "$cve"
            echo "========================================"
            ((count++))
        fi
    done < "$cve_file"
    
    print_success "Analyzed $count CVEs"
}

# Function to check CVE severity
check_cve_severity() {
    local cve="$1"
    local score="$2"
    
    if (( $(echo "$score >= 9.0" | bc -l) )); then
        print_error "$cve: CRITICAL (Score: $score)"
    elif (( $(echo "$score >= 7.0" | bc -l) )); then
        print_warning "$cve: HIGH (Score: $score)"
    elif (( $(echo "$score >= 4.0" | bc -l) )); then
        print_info "$cve: MEDIUM (Score: $score)"
    else
        print_success "$cve: LOW (Score: $score)"
    fi
}

# Function to generate CVE report
generate_cve_report() {
    local cve_file="$1"
    local output_file="${cve_file%.*}_report.html"
    
    print_info "Generating CVE report: $output_file"
    
    cat > "$output_file" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>CVE Analysis Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .cve { border: 1px solid #ddd; margin: 10px 0; padding: 15px; }
        .critical { border-left: 5px solid #ff0000; }
        .high { border-left: 5px solid #ff6600; }
        .medium { border-left: 5px solid #ffcc00; }
        .low { border-left: 5px solid #00cc00; }
        h1 { color: #333; }
        h2 { color: #666; }
        .score { font-weight: bold; }
    </style>
</head>
<body>
    <h1>CVE Analysis Report</h1>
    <p>Generated on: $(date)</p>
    <p>Source file: $cve_file</p>
    
EOF

    while IFS= read -r cve; do
        if [ -n "$cve" ]; then
            cat >> "$output_file" << EOF
    <div class="cve">
        <h2>$cve</h2>
        <p><strong>NVD Link:</strong> <a href="https://nvd.nist.gov/vuln/detail/$cve" target="_blank">https://nvd.nist.gov/vuln/detail/$cve</a></p>
        <p><strong>MITRE Link:</strong> <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=$cve" target="_blank">https://cve.mitre.org/cgi-bin/cvename.cgi?name=$cve</a></p>
    </div>
    
EOF
        fi
    done < "$cve_file"
    
    cat >> "$output_file" << EOF
</body>
</html>
EOF

    print_success "HTML report generated: $output_file"
}

# Main function
main() {
    case "${1:-}" in
        lookup)
            if [ -z "${2:-}" ]; then
                print_error "Usage: $0 lookup <CVE-ID>"
                exit 1
            fi
            lookup_cve "$2"
            ;;
        analyze)
            if [ -z "${2:-}" ]; then
                print_error "Usage: $0 analyze <cve-file>"
                exit 1
            fi
            analyze_cves "$2"
            ;;
        report)
            if [ -z "${2:-}" ]; then
                print_error "Usage: $0 report <cve-file>"
                exit 1
            fi
            generate_cve_report "$2"
            ;;
        *)
            cat << EOF
CVE Lookup and Analysis Helper

Usage: $0 <command> [arguments]

Commands:
    lookup <CVE-ID>     Look up details for a specific CVE
    analyze <file>      Analyze all CVEs in a file
    report <file>       Generate HTML report for CVEs in a file

Examples:
    $0 lookup CVE-2021-44228
    $0 analyze unique_cves.txt
    $0 report unique_cves.txt

Requirements:
    - curl (for API calls)
    - jq (optional, for JSON parsing)
    - bc (for score comparison)
EOF
            ;;
    esac
}

main "$@"
