#!/bin/bash

# Website Vulnerability Scanner
# This script performs comprehensive vulnerability analysis on websites
# Author: Security Scanner Tool
# Date: $(date)

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
TARGET=""
OUTPUT_DIR="vulnerability_scan_$(date +%Y%m%d_%H%M%S)"
VERBOSE=false
DEEP_SCAN=false
NUCLEI_TEMPLATES=""

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_cve() {
    echo -e "${PURPLE}[CVE FOUND]${NC} $1"
}

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [OPTIONS] <target>

OPTIONS:
    -h, --help          Show this help message
    -v, --verbose       Enable verbose output
    -d, --deep          Enable deep scanning (slower but more thorough)
    -o, --output DIR    Custom output directory
    -t, --templates DIR Custom nuclei templates directory

EXAMPLES:
    $0 example.com
    $0 -v -d https://example.com
    $0 --output /tmp/scan example.com

REQUIREMENTS:
    - nmap
    - nikto
    - nuclei
    - whatweb
    - curl
    - dig
    - whois
EOF
}

# Function to check if required tools are installed
check_dependencies() {
    print_status "Checking dependencies..."
    
    local missing_tools=()
    local tools=("nmap" "curl" "dig" "whois")
    local optional_tools=("nikto" "nuclei" "whatweb")
    
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
        fi
    done
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        print_error "Missing required tools: ${missing_tools[*]}"
        print_status "Install missing tools with:"
        echo "sudo apt-get update && sudo apt-get install -y ${missing_tools[*]}"
        exit 1
    fi
    
    # Check optional tools
    for tool in "${optional_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            print_warning "Optional tool '$tool' not found. Some scans will be skipped."
        fi
    done
    
    print_success "All required dependencies are installed"
}

# Function to create output directory
setup_output_dir() {
    if [ ! -d "$OUTPUT_DIR" ]; then
        mkdir -p "$OUTPUT_DIR"
        print_success "Created output directory: $OUTPUT_DIR"
    fi
}

# Function to normalize target URL
normalize_target() {
    local target="$1"
    
    # Remove protocol if present
    target=$(echo "$target" | sed 's|^https\?://||')
    
    # Remove trailing slash
    target=$(echo "$target" | sed 's|/$||')
    
    # Extract domain if path is present
    target=$(echo "$target" | cut -d'/' -f1)
    
    echo "$target"
}

# Function to perform DNS reconnaissance
dns_recon() {
    print_status "Performing DNS reconnaissance..."
    
    local target="$1"
    local dns_file="$OUTPUT_DIR/dns_recon.txt"
    
    {
        echo "=== DNS Reconnaissance for $target ==="
        echo "Date: $(date)"
        echo ""
        
        echo "=== A Records ==="
        dig A "$target" +short || echo "No A records found"
        echo ""
        
        echo "=== AAAA Records ==="
        dig AAAA "$target" +short || echo "No AAAA records found"
        echo ""
        
        echo "=== MX Records ==="
        dig MX "$target" +short || echo "No MX records found"
        echo ""
        
        echo "=== NS Records ==="
        dig NS "$target" +short || echo "No NS records found"
        echo ""
        
        echo "=== TXT Records ==="
        dig TXT "$target" +short || echo "No TXT records found"
        echo ""
        
        echo "=== WHOIS Information ==="
        whois "$target" 2>/dev/null || echo "WHOIS lookup failed"
        
    } > "$dns_file"
    
    print_success "DNS reconnaissance completed: $dns_file"
}

# Function to perform port scanning with nmap
port_scan() {
    print_status "Performing port scan..."
    
    local target="$1"
    local nmap_file="$OUTPUT_DIR/nmap_scan.txt"
    
    if [ "$DEEP_SCAN" = true ]; then
        print_status "Running comprehensive port scan (this may take a while)..."
        nmap -sS -sV -sC -O -A -T4 -p- --script=vuln "$target" > "$nmap_file" 2>&1
    else
        print_status "Running quick port scan..."
        nmap -sS -sV -sC -T4 --top-ports 1000 --script=vuln "$target" > "$nmap_file" 2>&1
    fi
    
    print_success "Port scan completed: $nmap_file"
    
    # Extract potential CVEs from nmap output
    local cve_file="$OUTPUT_DIR/cves_from_nmap.txt"
    grep -i "CVE-" "$nmap_file" > "$cve_file" 2>/dev/null || true
    
    if [ -s "$cve_file" ]; then
        print_cve "CVEs found in nmap scan:"
        cat "$cve_file"
    fi
}

# Function to perform web technology detection
web_tech_detection() {
    print_status "Detecting web technologies..."
    
    local target="$1"
    local tech_file="$OUTPUT_DIR/web_technologies.txt"
    
    {
        echo "=== Web Technology Detection for $target ==="
        echo "Date: $(date)"
        echo ""
        
        # HTTP headers analysis
        echo "=== HTTP Headers ==="
        curl -I "http://$target" 2>/dev/null || echo "HTTP connection failed"
        echo ""
        curl -I "https://$target" 2>/dev/null || echo "HTTPS connection failed"
        echo ""
        
        # WhatWeb analysis (if available)
        if command -v whatweb &> /dev/null; then
            echo "=== WhatWeb Analysis ==="
            whatweb "$target" --color=never || echo "WhatWeb analysis failed"
        fi
        
    } > "$tech_file"
    
    print_success "Web technology detection completed: $tech_file"
}

# Function to run Nikto web vulnerability scanner
nikto_scan() {
    if ! command -v nikto &> /dev/null; then
        print_warning "Nikto not found, skipping web vulnerability scan"
        return
    fi
    
    print_status "Running Nikto web vulnerability scan..."
    
    local target="$1"
    local nikto_file="$OUTPUT_DIR/nikto_scan.txt"
    
    nikto -h "$target" -Format txt -output "$nikto_file" 2>/dev/null || {
        print_warning "Nikto scan failed or found no issues"
        echo "Nikto scan failed for $target" > "$nikto_file"
    }
    
    print_success "Nikto scan completed: $nikto_file"
    
    # Extract potential CVEs from nikto output
    local cve_file="$OUTPUT_DIR/cves_from_nikto.txt"
    grep -i "CVE-" "$nikto_file" > "$cve_file" 2>/dev/null || true
    
    if [ -s "$cve_file" ]; then
        print_cve "CVEs found in Nikto scan:"
        cat "$cve_file"
    fi
}

# Function to run Nuclei vulnerability scanner
nuclei_scan() {
    if ! command -v nuclei &> /dev/null; then
        print_warning "Nuclei not found, skipping nuclei vulnerability scan"
        return
    fi
    
    print_status "Running Nuclei vulnerability scan..."
    
    local target="$1"
    local nuclei_file="$OUTPUT_DIR/nuclei_scan.txt"
    
    local nuclei_cmd="nuclei -u https://$target -o $nuclei_file"
    
    if [ -n "$NUCLEI_TEMPLATES" ]; then
        nuclei_cmd="$nuclei_cmd -t $NUCLEI_TEMPLATES"
    fi
    
    if [ "$VERBOSE" = true ]; then
        nuclei_cmd="$nuclei_cmd -v"
    fi
    
    eval "$nuclei_cmd" 2>/dev/null || {
        print_warning "Nuclei scan failed or found no issues"
        echo "Nuclei scan failed for $target" > "$nuclei_file"
    }
    
    print_success "Nuclei scan completed: $nuclei_file"
    
    # Extract potential CVEs from nuclei output
    local cve_file="$OUTPUT_DIR/cves_from_nuclei.txt"
    grep -i "CVE-" "$nuclei_file" > "$cve_file" 2>/dev/null || true
    
    if [ -s "$cve_file" ]; then
        print_cve "CVEs found in Nuclei scan:"
        cat "$cve_file"
    fi
}

# Function to compile all CVEs found
compile_cves() {
    print_status "Compiling all CVEs found..."
    
    local all_cves_file="$OUTPUT_DIR/all_cves_found.txt"
    
    {
        echo "=== All CVEs Found for $TARGET ==="
        echo "Date: $(date)"
        echo ""
        
        # Combine all CVE files
        for cve_file in "$OUTPUT_DIR"/cves_from_*.txt; do
            if [ -f "$cve_file" ] && [ -s "$cve_file" ]; then
                echo "=== From $(basename "$cve_file") ==="
                cat "$cve_file"
                echo ""
            fi
        done
        
        # Also check all scan files for CVE mentions
        echo "=== Additional CVE Mentions ==="
        grep -i "CVE-[0-9]\{4\}-[0-9]\+" "$OUTPUT_DIR"/*.txt 2>/dev/null | grep -v "cves_from_" || echo "No additional CVEs found"
        
    } > "$all_cves_file"
    
    if [ -s "$all_cves_file" ] && grep -q "CVE-" "$all_cves_file"; then
        print_cve "Compilation completed: $all_cves_file"
        
        # Extract unique CVEs
        local unique_cves_file="$OUTPUT_DIR/unique_cves.txt"
        grep -o "CVE-[0-9]\{4\}-[0-9]\+" "$all_cves_file" | sort -u > "$unique_cves_file"
        
        print_cve "Unique CVEs found:"
        cat "$unique_cves_file"
        
        echo ""
        print_success "Total unique CVEs found: $(wc -l < "$unique_cves_file")"
    else
        print_warning "No CVEs found during the scan"
    fi
}

# Function to generate summary report
generate_report() {
    print_status "Generating summary report..."
    
    local report_file="$OUTPUT_DIR/vulnerability_report.txt"
    
    {
        echo "========================================"
        echo "    VULNERABILITY SCAN REPORT"
        echo "========================================"
        echo "Target: $TARGET"
        echo "Scan Date: $(date)"
        echo "Output Directory: $OUTPUT_DIR"
        echo ""
        
        echo "=== SCAN SUMMARY ==="
        echo "Files generated:"
        ls -la "$OUTPUT_DIR"
        echo ""
        
        echo "=== CVE SUMMARY ==="
        if [ -f "$OUTPUT_DIR/unique_cves.txt" ] && [ -s "$OUTPUT_DIR/unique_cves.txt" ]; then
            echo "Total CVEs found: $(wc -l < "$OUTPUT_DIR/unique_cves.txt")"
            echo "CVEs:"
            cat "$OUTPUT_DIR/unique_cves.txt"
        else
            echo "No CVEs found"
        fi
        echo ""
        
        echo "=== RECOMMENDATIONS ==="
        echo "1. Review all scan results in the output directory"
        echo "2. Investigate any CVEs found using CVE databases"
        echo "3. Apply security patches for identified vulnerabilities"
        echo "4. Consider running deeper scans if needed"
        echo "5. Implement security monitoring"
        
    } > "$report_file"
    
    print_success "Summary report generated: $report_file"
}

# Main scanning function
main_scan() {
    local target="$1"
    
    print_status "Starting vulnerability scan for: $target"
    print_status "Output directory: $OUTPUT_DIR"
    
    # Perform all scans
    dns_recon "$target"
    web_tech_detection "$target"
    port_scan "$target"
    nikto_scan "$target"
    nuclei_scan "$target"
    
    # Compile results
    compile_cves
    generate_report
    
    print_success "Vulnerability scan completed!"
    print_status "Check the '$OUTPUT_DIR' directory for detailed results"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -d|--deep)
            DEEP_SCAN=true
            shift
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -t|--templates)
            NUCLEI_TEMPLATES="$2"
            shift 2
            ;;
        -*)
            print_error "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            if [ -z "$TARGET" ]; then
                TARGET="$1"
            else
                print_error "Multiple targets specified. Please provide only one target."
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate target
if [ -z "$TARGET" ]; then
    print_error "No target specified"
    usage
    exit 1
fi

# Normalize target
TARGET=$(normalize_target "$TARGET")

# Main execution
print_status "Website Vulnerability Scanner"
print_status "Target: $TARGET"

check_dependencies
setup_output_dir
main_scan "$TARGET"

exit 0
